#!/usr/bin/env python

# extract embedded media from binaries.

import binascii
import os
import re
import shutil
import sys

if len(sys.argv) != 3:
    print('Usage: ' + sys.argv[0] + ' <binary_file/directory> <destination_dir>')
    print('<binary_file/directory> - the binary file or directory containing embedded audio, images, etc.')
    print('<destination_dir> - the output directory where to save the extracted data')
    sys.exit(1)

source_file = sys.argv[1]
destination_dir = sys.argv[2]
# PNG Headers
PNG_HEADER = '89504e47'
PNG_FOOTER = '49454e44ae426082'
# OGG Headers
OGG_HEADER = '4f676753'
# MP3 with ID3v2
ID3_HEADER = '494433'
# https in hex
HTTPS_HEADER = "6874747073"
# KTX header
KTX_HEADER = "4b5458203131"

amount = {
    "png": 0,
    "ogg": 0,
    "mp3": 0,
    "ktx": 0,
}

error_extract = {
    "Unknown": 0,
    "Failed": 0
}

def write_file(file_type, body, file_name):
    header, footer = "", ""
    if file_type == "ogg":
        header = OGG_HEADER
    if file_type == "mp3":
        header = ID3_HEADER
    if file_type == "png":
        header = PNG_HEADER
        footer = PNG_FOOTER
    if file_type == "ktx":
        header = KTX_HEADER
    if header == "":
        return "Error: File type unsupported."

    content = header + body + footer
    try:
        content_raw = binascii.a2b_hex(content)
    except binascii.Error:
        return "Error: File type unsupported."
    fname = 'rblx-' + file_name + '.' + file_type
    writer = open(os.path.join(destination_dir + "/" + file_type, fname), 'wb+')
    writer.write(content_raw)
    writer.close()


def extract_binary(file_path):
    binary = open(file_path, 'rb')
    hexadecimal = binascii.hexlify(binary.read())
    _, file_name = os.path.split(file_path)
    decoded_file = hexadecimal.decode()

    # Get Roblox CDN URL from hex.
    hex_url = re.search(HTTPS_HEADER + "(.*?)00c8", decoded_file)
    if hex_url is None:
        # Happens when this file doesn't have any binary content, just a URL.
        shutil.copy(file_path, destination_dir+"/unknown")
        error_extract["Unknown"] += 1
        return amount
    cdn_url = bytearray.fromhex(hex_url.group()[:-4]).decode()
    file_name = cdn_url.split("/")[3]

    # TODO: make less awful

    matches = re.findall(PNG_HEADER + "(.*?)" + PNG_FOOTER, decoded_file)

    if len(matches) > 0:
        for body in matches:
            if write_file("png", body, file_name) is not None:
                print("ERROR FOUND IN FILE: " + file_path)
                shutil.copy(file_path, destination_dir + "/failed")
                error_extract["Failed"] += 1
            else:
                amount["png"] += 1
        binary.close()
        return amount

    matches = re.findall(OGG_HEADER + "(.*)", decoded_file)

    if len(matches) == 1:
        for body in matches:
            if write_file("ogg", body, file_name) is not None:
                print("ERROR FOUND IN FILE: " + file_path)
                shutil.copy(file_path, destination_dir + "/failed")
                error_extract["Failed"] += 1
            else:
                amount["ogg"] += 1
        binary.close()
        return amount

    matches = re.findall(KTX_HEADER + "(.*)", decoded_file)

    if len(matches) == 1:
        for body in matches:
            if write_file("ktx", body, file_name) is not None:
                print("ERROR FOUND IN FILE: " + file_path)
                shutil.copy(file_path, destination_dir + "/failed")
                error_extract["Failed"] += 1
            else:
                amount["ktx"] += 1
        binary.close()
        return amount

    matches = re.findall(ID3_HEADER + "(.*)", decoded_file)

    if len(matches) == 1:
        for body in matches:
            if write_file("mp3", body, file_name) is not None:
                print("ERROR FOUND IN FILE: " + file_path)
                shutil.copy(file_path, destination_dir + "/failed")
                error_extract["Failed"] += 1
            else:
                amount["mp3"] += 1
        binary.close()
        return amount

    return amount


def generate_directories(destination):
    supported_extensions = ["png", "ogg", "mp3", "ktx", "unknown", "failed"]
    for extension in supported_extensions:
        if not os.path.exists(destination+"/"+extension):
            os.makedirs(destination+"/"+extension)


if os.path.isdir(source_file):
    print("Directory provided. Extracting all files...")
    generate_directories(destination_dir)
    files = os.listdir(source_file)
    files = [f for f in files if os.path.isfile(source_file + '/' + f)]
    for file in files:
        extract_binary(source_file + "/" + file)
    print("Done! Total extracted: " + str(sum(amount.values())))
    for key in amount.keys():
        print(key.upper() + " extracted: " + str(amount[key]))
    for key in error_extract.keys():
        print(key.upper() + " during extract: " + str(error_extract[key]))
else:
    extract_binary(source_file)
